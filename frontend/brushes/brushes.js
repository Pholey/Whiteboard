// Generated by LiveScript 1.2.0
var Color, Brush, WireframeBrush, ColorSamplerBrush, Lenny, EraserBrush, CopyPasteBrush, SketchBrush, getBrush;
Color = net.brehaut.Color;
Brush = (function(){
  Brush.displayName = 'Brush';
  var prototype = Brush.prototype, constructor = Brush;
  function Brush(radius, color, canvas){
    this.type = "default";
    this.isTool = false;
    this.radius = radius;
    this.color = Color(color);
    this.canvas = canvas;
    this.action_data = [];
  }
  prototype.actionInit = function(x, y){
    this.canvas.context.moveTo(x, y);
    this.canvas.context.strokeStyle = this.color.toCSS();
    this.canvas.context.beginPath();
    this.canvas.context.lineWidth = this.radius;
    this.canvas.context.lineJoin = this.canvas.context.lineCap = 'round';
  };
  prototype.actionStart = function(x, y){
    this.action_data = {
      brushtype: this.type,
      radius: this.radius,
      color: this.color.toCSS(),
      coords: []
    };
    this.actionInit(x, y);
    this.action_data.coords.push([x, y]);
  };
  prototype.actionReset = function(){
    this.action_data = {
      brushtype: this.type,
      radius: this.radius,
      color: this.color.toCSS(),
      coords: []
    };
  };
  prototype.actionEnd = function(){
    this.canvas.context.closePath();
  };
  prototype.actionMove = function(x, y){
    if (this.action_data.coords.length !== 0) {
      this.canvas.context.lineTo(x, y);
      this.canvas.context.stroke();
    } else {
      this.actionInit(x, y);
    }
    this.action_data.coords.push([x, y]);
  };
  prototype.actionProcessCoords = function(data){
    var i$, ref$, len$, p;
    for (i$ = 0, len$ = (ref$ = data.coords).length; i$ < len$; ++i$) {
      p = ref$[i$];
      this.canvas.context.lineTo(p[0], p[1]);
      this.action_data.coords.push(p[0], p[1]);
    }
    this.canvas.context.stroke();
  };
  prototype.actionRedraw = function(){
    var i$, ref$, len$, p;
    if (this.action_data.coords.length !== 0) {
      this.actionInit(this.action_data.coords[0][0], this.action_data.coords[0][1]);
      for (i$ = 0, len$ = (ref$ = this.action_data.coords).length; i$ < len$; ++i$) {
        p = ref$[i$];
        this.canvas.context.lineTo(p[0], p[1]);
      }
      this.canvas.context.stroke();
    }
  };
  prototype.setActionData = function(data){
    var x;
    this.action_data.brushtype = data.brushtype;
    this.action_data.radius = data.radius;
    this.action_data.color = data.color;
    this.action_data.coords = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = data.coords).length; i$ < len$; ++i$) {
        x = ref$[i$];
        results$.push(x);
      }
      return results$;
    }());
  };
  prototype.getActionData = function(data){
    var ret, res$, i$, ref$, len$, x;
    ret = {};
    ret.brushtype = this.action_data.brushtype;
    ret.radius = this.action_data.radius;
    ret.color = this.action_data.color;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = this.action_data.coords).length; i$ < len$; ++i$) {
      x = ref$[i$];
      res$.push(x);
    }
    ret.coords = res$;
    return ret;
  };
  prototype.doAction = function(data){
    var i$, ref$, len$, p;
    if (data.coords.length !== 0) {
      this.actionInit(data.coords[0][0], data.coords[0][1]);
      for (i$ = 0, len$ = (ref$ = data.coords).length; i$ < len$; ++i$) {
        p = ref$[i$];
        this.canvas.context.lineTo(p[0], p[1]);
      }
      this.canvas.context.stroke();
      this.actionEnd();
    }
  };
  return Brush;
}());
WireframeBrush = (function(superclass){
  var prototype = extend$((import$(WireframeBrush, superclass).displayName = 'WireframeBrush', WireframeBrush), superclass).prototype, constructor = WireframeBrush;
  function WireframeBrush(radius, color, canvas){
    WireframeBrush.superclass.apply(this, arguments);
    this.type = "wireframe";
  }
  prototype.actionInit = function(x, y){
    this.canvas.context.moveTo(x, y);
    this.canvas.context.strokeStyle = this.color.toCSS();
    this.canvas.context.beginPath();
    this.canvas.context.lineWidth = this.radius;
  };
  prototype.actionStart = function(x, y){
    this.action_data = {
      brushtype: this.type,
      radius: this.radius,
      color: this.color.toCSS(),
      coords: []
    };
    this.actionInit(x, y);
  };
  prototype.actionEnd = function(){
    this.canvas.context.closePath();
  };
  prototype.actionMove = function(x, y){
    var numpoints;
    this.canvas.context.lineTo(x, y);
    numpoints = this.action_data.coords.length;
    if (numpoints >= 4) {
      this.canvas.context.lineTo(this.action_data.coords[numpoints - 4][0], this.action_data.coords[numpoints - 4][1]);
    }
    this.canvas.context.stroke();
    this.action_data.coords.push([x, y]);
  };
  prototype.actionProcessCoords = function(data){
    var i$, to$, i, nearpoint;
    for (i$ = 1, to$ = data.coords.length; i$ < to$; ++i$) {
      i = i$;
      this.canvas.context.lineTo(data.coords[i][0], data.coords[i][1]);
      nearpoint = data.coords[i - 5];
      if (nearpoint) {
        this.canvas.context.moveTo(nearpoint[0], nearpoint[1]);
        this.canvas.context.lineTo(data.coords[i][0], data.coords[i][1]);
      }
      this.action_data.coords.push(data.coords[i][0], data.coords[i][1]);
    }
    this.canvas.context.stroke();
  };
  prototype.actionRedraw = function(){
    var i$, to$, i, nearpoint;
    this.actionInit(this.action_data.coords[0][0], this.action_data.coords[0][1]);
    for (i$ = 1, to$ = this.action_data.coords.length; i$ < to$; ++i$) {
      i = i$;
      this.canvas.context.lineTo(this.action_data.coords[i][0], this.action_data.coords[i][1]);
      nearpoint = this.action_data.coords[i - 5];
      if (nearpoint) {
        this.canvas.context.moveTo(nearpoint[0], nearpoint[1]);
        this.canvas.context.lineTo(this.action_data.coords[i][0], this.action_data.coords[i][1]);
      }
    }
    this.canvas.context.stroke();
  };
  prototype.doAction = function(data){
    var i$, to$, i, nearpoint;
    if (data.coords.length !== 0) {
      this.actionInit(data.coords[0][0], data.coords[0][1]);
      for (i$ = 1, to$ = data.coords.length; i$ < to$; ++i$) {
        i = i$;
        this.canvas.context.lineTo(data.coords[i][0], data.coords[i][1]);
        nearpoint = data.coords[i - 5];
        if (nearpoint) {
          this.canvas.context.moveTo(nearpoint[0], nearpoint[1]);
          this.canvas.context.lineTo(data.coords[i][0], data.coords[i][1]);
        }
      }
      this.canvas.context.stroke();
      this.actionEnd();
    }
  };
  return WireframeBrush;
}(Brush));
ColorSamplerBrush = (function(superclass){
  var prototype = extend$((import$(ColorSamplerBrush, superclass).displayName = 'ColorSamplerBrush', ColorSamplerBrush), superclass).prototype, constructor = ColorSamplerBrush;
  function ColorSamplerBrush(radius, color, canvas){
    ColorSamplerBrush.superclass.apply(this, arguments);
    this.type = "sampler";
  }
  prototype.actionInit = function(x, y){
    var p, a, hex;
    p = this.canvas.context.getImageData(x, y, 1, 1).data;
    a = p[3] / 255.0;
    hex = "rgba(" + p[0] + "," + p[1] + "," + p[2] + "," + a + ")";
    this.canvas.doColorChange(Color(hex));
  };
  prototype.actionStart = function(x, y){
    this.actionInit(x, y);
    this.action_data = {
      brushtype: this.type,
      radius: this.radius,
      color: this.color.toCSS(),
      coords: []
    };
  };
  prototype.actionEnd = function(){
    return;
  };
  prototype.actionMove = function(x, y){
    this.actionInit(x, y);
  };
  prototype.actionProcessCoords = function(data){};
  prototype.actionRedraw = function(){
    return;
  };
  prototype.doAction = function(data){
    return;
  };
  return ColorSamplerBrush;
}(Brush));
Lenny = (function(superclass){
  var prototype = extend$((import$(Lenny, superclass).displayName = 'Lenny', Lenny), superclass).prototype, constructor = Lenny;
  function Lenny(radius, color, canvas){
    Lenny.superclass.apply(this, arguments);
    this.type = "lenny";
  }
  prototype.actionInit = function(x, y){
    this.canvas.context.moveTo(x, y);
    this.canvas.context.fillStyle = this.color.toCSS();
    this.canvas.context.font = "bold " + this.radius + "px arial";
    this.canvas.context.fillText("( ͡° ͜ʖ ͡°)", x, y);
  };
  prototype.actionStart = function(x, y){
    this.actionInit(x, y);
    this.action_data = {
      brushtype: this.type,
      radius: this.radius,
      color: this.color.toCSS(),
      coords: []
    };
    this.action_data.coords.push([x, y]);
  };
  prototype.actionEnd = function(){
    return;
  };
  prototype.actionMove = function(x, y){
    this.canvas.context.fillText("( ͡° ͜ʖ ͡°)", x, y);
    this.action_data.coords.push([x, y]);
  };
  prototype.actionProcessCoords = function(data){
    var i$, ref$, len$, p;
    for (i$ = 0, len$ = (ref$ = data.coords).length; i$ < len$; ++i$) {
      p = ref$[i$];
      this.canvas.context.fillText("( ͡° ͜ʖ ͡°)", p[0], p[1]);
      this.action_data.coords.push(p[0], p[1]);
    }
  };
  prototype.actionRedraw = function(){
    var i$, ref$, len$, p;
    if (this.action_data.coords.length !== 0) {
      this.actionInit(this.action_data.coords[0][0], this.action_data.coords[0][1]);
      for (i$ = 0, len$ = (ref$ = this.action_data).length; i$ < len$; ++i$) {
        p = ref$[i$];
        this.canvas.context.fillText("( ͡° ͜ʖ ͡°)", p[0], p[1]);
      }
    }
  };
  prototype.doAction = function(data){
    var i$, ref$, len$, p;
    if (data.coords.length !== 0) {
      this.actionInit(data.coords[0][0], data.coords[0][1]);
      for (i$ = 0, len$ = (ref$ = data.coords).length; i$ < len$; ++i$) {
        p = ref$[i$];
        this.canvas.context.fillText("( ͡° ͜ʖ ͡°)", p[0], p[1]);
      }
    }
  };
  return Lenny;
}(Brush));
EraserBrush = (function(superclass){
  var prototype = extend$((import$(EraserBrush, superclass).displayName = 'EraserBrush', EraserBrush), superclass).prototype, constructor = EraserBrush;
  function EraserBrush(radius, color, canvas){
    EraserBrush.superclass.apply(this, arguments);
    this.type = "eraser";
  }
  prototype.actionInit = function(x, y){
    var corner_x, corner_y;
    corner_x = x - this.radius >= 0 ? x - this.radius : 0;
    corner_y = y - this.radius >= 0 ? y - this.radius : 0;
    this.canvas.context.clearRect(corner_x, corner_y, this.radius * 2, this.radius * 2);
    this.action_data = {
      brushtype: this.type,
      radius: this.radius,
      color: this.color.toCSS(),
      coords: []
    };
    this.action_data.coords.push([x, y]);
  };
  prototype.actionStart = function(x, y){
    this.actionInit(x, y);
  };
  prototype.actionEnd = function(){
    return;
  };
  prototype.actionMove = function(x, y){
    var corner_x, corner_y;
    corner_x = x - this.radius >= 0 ? x - this.radius : 0;
    corner_y = y - this.radius >= 0 ? y - this.radius : 0;
    this.canvas.context.clearRect(corner_x, corner_y, this.radius * 2, this.radius * 2);
    this.action_data.coords.push([x, y]);
  };
  prototype.actionProcessCoords = function(data){
    var i$, ref$, len$, p, corner_x, corner_y;
    for (i$ = 0, len$ = (ref$ = data.coords).length; i$ < len$; ++i$) {
      p = ref$[i$];
      corner_x = p[0] - this.radius >= 0 ? p[0] - this.radius : 0;
      corner_y = p[1] - this.radius >= 0 ? p[1] - this.radius : 0;
      this.canvas.context.clearRect(corner_x, corner_y, this.radius * 2, this.radius * 2);
      this.action_data.coords.push(p[0], p[1]);
    }
  };
  prototype.actionRedraw = function(){
    var i$, ref$, len$, p, corner_x, corner_y;
    this.actionInit(this.action_data.coords[0][0], this.action_data.coords[0][1]);
    for (i$ = 0, len$ = (ref$ = this.action_data).length; i$ < len$; ++i$) {
      p = ref$[i$];
      corner_x = p[0] - this.radius >= 0 ? p[0] - this.radius : 0;
      corner_y = p[1] - this.radius >= 0 ? p[1] - this.radius : 0;
      this.canvas.context.clearRect(corner_x, corner_y, this.radius * 2, this.radius * 2);
    }
  };
  prototype.doAction = function(data){
    var i$, ref$, len$, p, corner_x, corner_y;
    if (data.coords.length !== 0) {
      for (i$ = 0, len$ = (ref$ = data.coords).length; i$ < len$; ++i$) {
        p = ref$[i$];
        corner_x = p[0] - this.radius >= 0 ? p[0] - this.radius : 0;
        corner_y = p[1] - this.radius >= 0 ? p[1] - this.radius : 0;
        this.canvas.context.clearRect(corner_x, corner_y, this.radius * 2, this.radius * 2);
      }
    }
  };
  return EraserBrush;
}(Brush));
CopyPasteBrush = (function(superclass){
  var prototype = extend$((import$(CopyPasteBrush, superclass).displayName = 'CopyPasteBrush', CopyPasteBrush), superclass).prototype, constructor = CopyPasteBrush;
  function CopyPasteBrush(radius, color, canvas){
    CopyPasteBrush.superclass.apply(this, arguments);
    this.type = "copypaste";
    this.imgData = void 8;
  }
  prototype.actionInit = function(x, y){
    var corner_x, corner_y;
    corner_x = x - this.radius >= 0 ? x - this.radius : 0;
    corner_y = y - this.radius >= 0 ? y - this.radius : 0;
    this.imgData = this.canvas.context.getImageData(corner_x, corner_y, this.radius * 2, this.radius * 2);
    this.action_data = {
      brushtype: this.type,
      radius: this.radius,
      color: this.color.toCSS(),
      coords: []
    };
    this.action_data.coords.push([x, y]);
  };
  prototype.actionStart = function(x, y){
    this.actionInit(x, y);
  };
  prototype.actionEnd = function(){
    return;
  };
  prototype.actionMove = function(x, y){
    var corner_x, corner_y;
    corner_x = x - this.radius >= 0 ? x - this.radius : 0;
    corner_y = y - this.radius >= 0 ? y - this.radius : 0;
    this.canvas.context.putImageData(this.imgData, corner_x, corner_y);
    this.action_data.coords.push([x, y]);
  };
  prototype.actionProcessCoords = function(data){
    var i$, ref$, len$, p, corner_x, corner_y;
    for (i$ = 0, len$ = (ref$ = data.coords).length; i$ < len$; ++i$) {
      p = ref$[i$];
      corner_x = p[0] - this.radius >= 0 ? p[0] - this.radius : 0;
      corner_y = p[1] - this.radius >= 0 ? p[1] - this.radius : 0;
      this.canvas.context.putImageData(this.imgData, corner_x, corner_y);
      this.action_data.coords.push(p[0], p[1]);
    }
  };
  prototype.actionRedraw = function(){
    var i$, ref$, len$, p, corner_x, corner_y;
    this.actionInit(this.action_data.coords[0][0], this.action_data.coords[0][1]);
    for (i$ = 0, len$ = (ref$ = this.action_data).length; i$ < len$; ++i$) {
      p = ref$[i$];
      corner_x = p[0] - this.radius >= 0 ? p[0] - this.radius : 0;
      corner_y = p[1] - this.radius >= 0 ? p[1] - this.radius : 0;
      this.canvas.context.putImageData(this.imgData, corner_x, corner_y);
    }
  };
  prototype.doAction = function(data){
    var corner_x, corner_y, i$, ref$, len$, p;
    if (data.coords.length !== 0) {
      corner_x = data.coords[0][0] - this.radius >= 0 ? data.coords[0][0] - this.radius : 0;
      corner_y = data.coords[0][1] - this.radius >= 0 ? data.coords[0][1] - this.radius : 0;
      this.imgData = this.canvas.context.getImageData(corner_x, corner_y, this.radius * 2, this.radius * 2);
      for (i$ = 0, len$ = (ref$ = data.coords).length; i$ < len$; ++i$) {
        p = ref$[i$];
        corner_x = p[0] - this.radius >= 0 ? p[0] - this.radius : 0;
        corner_y = p[1] - this.radius >= 0 ? p[1] - this.radius : 0;
        this.canvas.context.putImageData(this.imgData, corner_x, corner_y);
      }
    }
  };
  return CopyPasteBrush;
}(Brush));
SketchBrush = (function(superclass){
  var prototype = extend$((import$(SketchBrush, superclass).displayName = 'SketchBrush', SketchBrush), superclass).prototype, constructor = SketchBrush;
  function SketchBrush(radius, color, canvas){
    SketchBrush.superclass.apply(this, arguments);
    this.type = "sketch";
  }
  prototype.actionInit = function(x, y){
    this.canvas.context.moveTo(x, y);
    this.canvas.context.strokeStyle = this.color.toCSS();
    this.canvas.context.beginPath();
    this.canvas.context.lineWidth = this.radius;
    this.canvas.context.lineCap = 'round';
  };
  prototype.actionStart = function(x, y){
    this.actionInit(x, y);
    this.action_data = {
      brushtype: this.type,
      radius: this.radius,
      color: this.color.toCSS(),
      coords: []
    };
  };
  prototype.actionEnd = function(){
    this.canvas.context.closePath();
  };
  prototype.actionMove = function(x, y){
    var numpoints, lastpoint, i$, ref$, len$, p, dx, dy, d;
    numpoints = this.action_data.coords.length;
    if (numpoints > 1) {
      lastpoint = this.action_data.coords[numpoints - 1];
      this.canvas.context.moveTo(lastpoint[0], lastpoint[1]);
      this.canvas.context.lineTo(x, y);
      this.canvas.context.stroke();
      this.canvas.context.closePath();
      this.canvas.context.strokeStyle = this.color.setAlpha(this.color.getAlpha() / 3.0).toCSS();
      for (i$ = 0, len$ = (ref$ = this.action_data.coords).length; i$ < len$; ++i$) {
        p = ref$[i$];
        dx = p[0] - x;
        dy = p[1] - y;
        d = dx * dx + dy * dy;
        if (d < 1000 && !(p[0] === lastpoint[0] && p[1] === lastpoint[1])) {
          this.canvas.context.beginPath();
          this.canvas.context.moveTo(x + dx * 0.2, y + dy * 0.2);
          this.canvas.context.lineTo(p[0] - dx * 0.2, p[1] - dy * 0.2);
        }
        this.canvas.context.stroke();
        this.canvas.context.closePath();
      }
      this.canvas.context.beginPath();
      this.canvas.context.strokeStyle = this.color.toCSS();
    }
    this.action_data.coords.push([x, y]);
  };
  prototype.actionProcessCoords = function(data){
    var i$, ref$, len$, p, to$, i, j$, dx, dy, d;
    for (i$ = 0, len$ = (ref$ = data.coords).length; i$ < len$; ++i$) {
      p = ref$[i$];
      this.canvas.context.lineTo(p[0], p[1]);
      this.action_data.coords.push(p[0], p[1]);
    }
    this.canvas.context.stroke();
    this.canvas.context.closePath();
    this.canvas.context.strokeStyle = this.color.setAlpha(this.color.getAlpha() / 3.0).toCSS();
    for (i$ = 1, to$ = data.coords.length; i$ < to$; ++i$) {
      i = i$;
      for (j$ = 0, len$ = (ref$ = data.coords).length; j$ < len$; ++j$) {
        p = ref$[j$];
        dx = p[0] - data.coords[i][0];
        dy = p[1] - data.coords[i][1];
        d = dx * dx + dy * dy;
        if (d < 1000 && !(p[0] === data.coords[i - 1][0] && p[1] === data.coords[i - 1][1])) {
          this.canvas.context.beginPath();
          this.canvas.context.moveTo(data.coords[i][0] + dx * 0.2, data.coords[i][1] + dy * 0.2);
          this.canvas.context.lineTo(p[0] - dx * 0.2, p[1] - dy * 0.2);
        }
      }
      this.canvas.context.stroke();
      this.canvas.context.closePath();
    }
    this.canvas.context.beginPath();
    this.canvas.context.strokeStyle = this.color.toCSS();
  };
  prototype.actionRedraw = function(){
    var i$, ref$, len$, p, to$, i, j$, dx, dy, d;
    this.actionInit(this.action_data.coords[0], this.action_data.coords[1]);
    for (i$ = 0, len$ = (ref$ = this.action_data).length; i$ < len$; ++i$) {
      p = ref$[i$];
      this.canvas.context.lineTo(p[0], p[1]);
    }
    this.canvas.context.stroke();
    this.canvas.context.closePath();
    this.canvas.context.strokeStyle = this.color.setAlpha(this.color.getAlpha() / 3.0).toCSS();
    for (i$ = 1, to$ = this.action_data.coords.length; i$ < to$; ++i$) {
      i = i$;
      for (j$ = 0, len$ = (ref$ = this.action_data).length; j$ < len$; ++j$) {
        p = ref$[j$];
        dx = p[0] - this.action_data.coords[i][0];
        dy = p[1] - this.action_data.coords[i][1];
        d = dx * dx + dy * dy;
        if (d < 1000 && !(p[0] === this.action_data.coords[i - 1][0] && p[1] === this.action_data.coords[i - 1][1])) {
          this.canvas.context.beginPath();
          this.canvas.context.moveTo(this.action_data.coords[i][0] + dx * 0.2, this.action_data.coords[i][1] + dy * 0.2);
          this.canvas.context.lineTo(p[0] - dx * 0.2, p[1] - dy * 0.2);
        }
      }
      this.canvas.context.stroke();
      this.canvas.context.closePath();
    }
    this.canvas.context.beginPath();
    this.canvas.context.strokeStyle = this.color.toCSS();
  };
  prototype.doAction = function(data){
    var i$, ref$, len$, p, to$, i, j$, dx, dy, d;
    if (data.coords.length !== 0) {
      this.actionStart(data.coords[0][0], data.coords[0][1]);
      for (i$ = 0, len$ = (ref$ = data.coords).length; i$ < len$; ++i$) {
        p = ref$[i$];
        this.canvas.context.lineTo(p[0], p[1]);
      }
      this.canvas.context.stroke();
      this.canvas.context.closePath();
      this.canvas.context.strokeStyle = this.color.setAlpha(this.color.getAlpha() / 3.0).toCSS();
      for (i$ = 1, to$ = data.coords.length; i$ < to$; ++i$) {
        i = i$;
        for (j$ = 0, len$ = (ref$ = data.coords).length; j$ < len$; ++j$) {
          p = ref$[j$];
          dx = p[0] - data.coords[i][0];
          dy = p[1] - data.coords[i][1];
          d = dx * dx + dy * dy;
          if (d < 1000 && !(p[0] === data.coords[i - 1][0] && p[1] === data.coords[i - 1][1])) {
            this.canvas.context.beginPath();
            this.canvas.context.moveTo(data.coords[i][0] + dx * 0.2, data.coords[i][1] + dy * 0.2);
            this.canvas.context.lineTo(p[0] - dx * 0.2, p[1] - dy * 0.2);
            this.canvas.context.stroke();
            this.canvas.context.closePath();
          }
        }
      }
    }
  };
  return SketchBrush;
}(Brush));
getBrush = function(brushtype, radius, color, canvas){
  switch (false) {
  case brushtype !== 'default':
    return new Brush(radius, color, canvas);
  case brushtype !== 'wireframe':
    return new WireframeBrush(radius, color, canvas);
  case brushtype !== 'sampler':
    return new ColorSamplerBrush(radius, color, canvas);
  case brushtype !== 'lenny':
    return new Lenny(radius, color, canvas);
  case brushtype !== 'eraser':
    return new EraserBrush(radius, color, canvas);
  case brushtype !== 'copypaste':
    return new CopyPasteBrush(radius, color, canvas);
  case brushtype !== 'sketch':
    return new SketchBrush(radius, color, canvas);
  }
};
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}