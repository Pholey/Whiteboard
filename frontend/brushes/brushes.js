// Generated by LiveScript 1.2.0
(function(){
  var Brush, ColorSamplerBrush, getBrush;
  Brush = (function(){
    Brush.displayName = 'Brush';
    var prototype = Brush.prototype, constructor = Brush;
    function Brush(radius, color, canvas){
      this.type = "default";
      this.isTool = false;
      this.radius = radius;
      this.color = color;
      this.context = context;
    }
    prototype.actionStart = function(x, y){
      canvas.context.moveTo(x, y);
      canvas.context.strokeStyle = canvas.action.fillColor;
      canvas.context.beginPath();
      canvas.context.lineWidth = canvas.action.radius;
      return canvas.context.lineJoin = context.lineCap = 'round';
    };
    prototype.actionEnd = function(){
      return canvas.context.endPath();
    };
    prototype.actionMove = function(x, y){
      canvas.context.lineTo(x, y);
      return canvas.context.stroke();
    };
    prototype.doAction = function(data){
      var i$, len$, p;
      actionStart(data[0][0], data[0][1]);
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        p = data[i$];
        canvas.context.lineTo(p[0], p[1]);
      }
      canvas.context.stroke();
      return actionEnd();
    };
    return Brush;
  }());
  ColorSamplerBrush = (function(superclass){
    var prototype = extend$((import$(ColorSamplerBrush, superclass).displayName = 'ColorSamplerBrush', ColorSamplerBrush), superclass).prototype, constructor = ColorSamplerBrush;
    function ColorSamplerBrush(radius, color, canvas){
      this.type = "sampler";
      this.isTool = true;
      this.radius = radius;
      this.color = color;
      this.context = context;
    }
    prototype.actionStart = function(x, y){
      var p, hex, color;
      p = context.getImageData(x, y, 1, 1).data;
      hex = "#" + ("000000" + (function(){
        return p[0](16 .apply(this, arguments));
      } | function(){
        return p[1](8 .apply(this, arguments));
      } | p[2]).toString(16)).slice(-6);
      color = hex;
      return canvas.doColorChange(color);
    };
    prototype.actionEnd = function(){
      var color;
      return color = color;
    };
    prototype.actionMove = function(x, y){
      return actionStart(x(y));
    };
    prototype.doAction = function(data){
      return ata[0][0];
    };
    return ColorSamplerBrush;
  }(Brush));
  getBrush = function(brushtype, radius, color, canvas){
    switch (false) {
    case brushtype !== 'default':
      return new Brush(radius, color, canvas);
    case brushtype !== 'sampler':
      return new Brush(radius, color, canvas);
    }
  };
  "wireframe-brush = (context, event, points) ->\n\npoints.push [x:event.clientX, y: event.clientY]\ncontext.begin-path!\n\ncontext.move-to points[0].x, points[0].y\n\nfor x in points\n	context.line-to points[x].x, points[x].y\n	nearpoint = [x-5]\n	if nearpoint\n		context.move-to nearpoint.x nearpoint.y\n		context.line-to points[x].x, points[x].y\ncontext.stroke!\n\npoints";
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
