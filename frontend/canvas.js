// Generated by LiveScript 1.2.0
(function(){
  var Brush, ColorSamplerBrush, getBrush, Action;
  Brush = (function(){
    Brush.displayName = 'Brush';
    var prototype = Brush.prototype, constructor = Brush;
    function Brush(radius, color, canvas){
      this.type = "default";
      this.isTool = false;
      this.radius = radius;
      this.color = color;
      this.canvas = canvas;
    }
    prototype.actionStart = function(x, y){
      this.canvas.context.moveTo(x, y);
      this.canvas.context.strokeStyle = this.canvas.action.fillColor;
      this.canvas.context.beginPath();
      this.canvas.context.lineWidth = this.canvas.action.radius;
      this.canvas.context.lineJoin = this.canvas.context.lineCap = 'round';
    };
    prototype.actionEnd = function(){
      this.canvas.context.closePath();
    };
    prototype.actionMove = function(x, y){
      this.canvas.context.lineTo(x, y);
      this.canvas.context.stroke();
    };
    prototype.doAction = function(data){
      var i$, len$, p;
      this.actionStart(data[0][0], data[0][1]);
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        p = data[i$];
        this.canvas.context.lineTo(p[0], p[1]);
      }
      this.canvas.context.stroke();
      this.actionEnd();
    };
    return Brush;
  }());
  ColorSamplerBrush = (function(superclass){
    var prototype = extend$((import$(ColorSamplerBrush, superclass).displayName = 'ColorSamplerBrush', ColorSamplerBrush), superclass).prototype, constructor = ColorSamplerBrush;
    function ColorSamplerBrush(radius, color, canvas){
      this.type = "sampler";
      this.isTool = true;
      this.radius = radius;
      this.color = color;
      this.canvas = canvas;
    }
    prototype.actionStart = function(x, y){
      var p, r, g, b, hex;
      p = this.canvas.context.getImageData(x, y, 1, 1).data;
      r = ("0" + p[0].toString(16)).slice(-2);
      g = ("0" + p[1].toString(16)).slice(-2);
      b = ("0" + p[2].toString(16)).slice(-2);
      hex = "#" + r + g + b;
      this.canvas.doColorChange(hex);
    };
    prototype.actionEnd = function(){
      var color;
      color = color;
    };
    prototype.actionMove = function(x, y){
      this.actionStart(x, y);
    };
    prototype.doAction = function(data){
      data[0][0];
    };
    return ColorSamplerBrush;
  }(Brush));
  getBrush = function(brushtype, radius, color, canvas){
    switch (false) {
    case brushtype !== 'default':
      return new Brush(radius, color, canvas);
    case brushtype !== 'sampler':
      return new Brush(radius, color, canvas);
    }
  };
  Action = (function(){
    Action.displayName = 'Action';
    var prototype = Action.prototype, constructor = Action;
    function Action(id, brushtype, radius, color, coords){
      this.id = id;
      this.brushtype = brushtype;
      this.radius = radius;
      this.fillColor = color;
      this.coord_data = coords;
    }
    return Action;
  }());
  (function(){
    var createCanvas, init, container;
    createCanvas = function(parent, width, height){
      var canvas;
      width == null && (width = 100);
      height == null && (height = 100);
      canvas = {};
      canvas.node = document.createElement('canvas');
      canvas.node.width = width;
      canvas.node.height = height;
      canvas.context = canvas.node.getContext('2d');
      parent.appendChild(canvas.node);
      return canvas;
    };
    init = function(container, width, height, fillColor, brushRadius){
      var canvas, context, points;
      canvas = createCanvas(container, width, height);
      context = canvas.context;
      points = {};
      canvas.brushRadius = brushRadius;
      canvas.history = [];
      canvas.action = new Action('self', 'default', brushRadius, fillColor, []);
      canvas.brush = new Brush(brushRadius, fillColor, canvas);
      canvas.connection = new WebSocket('ws://localhost:9002/');
      canvas.connection.onopen = function(){
        canvas.connection.send('testing');
      };
      canvas.connection.onerror = function(error){
        console.log('websocket dun goofed: ' + error);
      };
      canvas.connection.onmessage = function(e){
        console.log('server says: ' + e.data);
      };
      context.fillCircle = function(x, y, radius, fillColor){
        this.fillStyle = fillColor;
        this.beginPath();
        this.moveTo(x, y);
        this.arc(x, y, radius, 0, Math.PI * 2, false);
        this.fill();
      };
      canvas.node.onmousemove = function(e){
        var x, y;
        if (!canvas.isDrawing) {
          return;
        }
        x = e.clientX;
        y = e.clientY;
        canvas.brush.actionMove(x, y);
        canvas.action.coord_data.push([x, y]);
        canvas.connection.send({
          'X': x,
          ' Y': y
        });
      };
      canvas.redraw = function(){
        var tempBrush, i$, ref$, len$, x;
        canvas.context.clearRect(0, 0, canvas.node.width, canvas.node.height);
        tempBrush = canvas.brush;
        for (i$ = 0, len$ = (ref$ = canvas.history).length; i$ < len$; ++i$) {
          x = ref$[i$];
          canvas.brush = getBrush(x.brushtype, x.radius, x.fillColor, canvas);
          if (!canvas.brush.isTool) {
            canvas.brush.doAction(x.coord_data);
          }
        }
        canvas.brush = tempBrush;
      };
      canvas.undo = function(user_id){
        var i$, i;
        if (user_id === 'self') {
          canvas.history.pop();
        } else {
          for (i$ = canvas.history.length; i$ <= 0; ++i$) {
            i = i$;
            if (canvas.history[i].id = user_id) {
              canvas.history = canvas.history.splice(i(1));
            }
          }
        }
        canvas.redraw();
      };
      canvas.node.onmousedown = function(e){
        canvas.isDrawing = true;
        canvas.brush.actionStart(e.clientX, e.clientY);
      };
      canvas.node.onmouseup = function(e){
        var tempAction, x;
        canvas.isDrawing = false;
        tempAction = new Action('self', canvas.brush.type, canvas.action.radius, canvas.action.fillColor, (function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = canvas.action.coord_data).length; i$ < len$; ++i$) {
            x = ref$[i$];
            results$.push(x);
          }
          return results$;
        }()));
        canvas.history.push(tempAction);
        canvas.action.coord_data = [];
        canvas.brush.actionEnd();
      };
      canvas.doColorChange = function(color){
        document.getElementById('color-value').value = color;
        canvas.action.fillColor = color;
        canvas.brush.color = color;
      };
      window.onkeydown = function(e){
        if (e.ctrlKey) {
          canvas.ctrlActivated = true;
        }
      };
      window.onkeyup = function(e){
        switch (e.keyCode) {
        case 90:
          if (canvas.ctrlActivated) {
            canvas.undo('self');
          }
        }
        if (e.ctrlKey) {
          canvas.ctrlActivated = false;
        }
      };
      document.getElementById('color-value').onkeypress = function(e){
        canvas.doColorChange(this.value);
      };
      document.getElementById('radius-value').onkeypress = function(e){
        canvas.action.radius = this.value;
        canvas.brush.radius = this.value;
      };
      document.getElementById('download').onclick = function(e){
        window.open(canvas.node.toDataURL(), 'Download');
      };
      document.getElementById('csampler').onclick = function(e){
        canvas.brush = new ColorSamplerBrush(canvas.action.radius, canvas.action.fillColor, canvas);
      };
      document.getElementById('pencil-brush').onclick = function(e){
        canvas.brush = new Brush(canvas.action.radius, canvas.action.fillColor, canvas);
      };
    };
    container = document.getElementById('canvas');
    return init(container, window.innerWidth - 17, window.innerHeight - 45, '#000000', 10);
  })();
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
